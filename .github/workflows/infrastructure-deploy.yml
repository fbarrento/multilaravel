name: Infrastructure Deployment

on:
  push:
    branches:
      - main
      - production
      - development
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/infrastructure-deploy.yml'
  pull_request:
    paths:
      - 'infrastructure/terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      action:
        description: 'Terraform action'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
        default: plan

env:
  TF_VERSION: "1.6.0"
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      aws-account-id: ${{ steps.env.outputs.aws-account-id }}
      deploy-role: ${{ steps.env.outputs.deploy-role }}
    steps:
      - name: Determine Environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          else
            case "${{ github.ref_name }}" in
              development)
                ENVIRONMENT="development"
                ;;
              main)
                ENVIRONMENT="staging"
                ;;
              production)
                ENVIRONMENT="production"
                ;;
              *)
                ENVIRONMENT="development"
                ;;
            esac
          fi
          echo "Environment determined: $ENVIRONMENT"
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

  terraform-plan:
    name: Terraform Plan
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    env:
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      TF_VAR_app_key: ${{ secrets.APP_KEY }}
      TF_VAR_certificate_arn: ${{ secrets.CERTIFICATE_ARN }}
    outputs:
      has-changes: ${{ steps.plan.outputs.has-changes }}
      exitcode: ${{ steps.plan.outputs.exitcode }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate tfvars file exists
        run: |
          TVARS_FILE="./infrastructure/terraform/environments/${{ needs.determine-environment.outputs.environment }}.tfvars"
          if [ ! -f "$TVARS_FILE" ]; then
            echo "No tfvars file found for environment: ${{ needs.determine-environment.outputs.environment }}"
            exit 1
          fi
          
          echo " ✅ tfvars file found for environment: ${{ needs.determine-environment.outputs.environment }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE }}
          aws-region: ${{ vars.AWS_REGION || 'eu-central-1' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./infrastructure/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=${{ needs.determine-environment.outputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION || 'eu-central-1' }}" \
            -backend-config="dynamodb_table=${{ secrets.TERRAFORM_LOCK_TABLE }}"

      - name: Terraform Validate
        working-directory: ./infrastructure/terraform
        run: terraform validate

      - name: Terraform Format Check
        working-directory: ./infrastructure/terraform
        run: terraform fmt -check -recursive

      - name: Show Terraform Variables (Debug)
        working-directory: ./infrastructure/terraform
        run: |
          echo "🔍 Terraform Variable Sources:"
          echo "✅ Using tfvars file: ${{ needs.determine-environment.outputs.tfvars-file }}"
          echo "✅ TF_VAR_app_image: ${{ env.TF_VAR_app_image }}"
          echo "✅ TF_VAR_db_password: ***MASKED***"
          echo "✅ TF_VAR_app_key: ***MASKED***"

      - name: Terraform Plan
        id: plan
        working-directory: ./infrastructure/terraform
        run: |
          set +e  # Don't exit immediately on non-zero exit codes
          
          terraform plan \
            -var-file="environments/${{ needs.determine-environment.outputs.environment }}.tfvars" \
            -input=false \
            -out=tfplan \
            -no-color \
            -detailed-exitcode

          PLAN_EXIT_CODE=$?
          echo "Plan exit code: $PLAN_EXIT_CODE"
          echo "exitcode=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Handle the detailed exit codes
          case $PLAN_EXIT_CODE in
            0)
            echo "✅ No changes detected - infrastructure is up to date"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "::notice::No infrastructure changes detected. Skipping apply step."
            ;;
            1)
              echo "❌ Terraform plan failed with errors"
              exit 1
              ;;
            2)
            echo "✅ Changes detected - plan successful, proceeding to apply"
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "::notice::Infrastructure changes detected. Apply step will be executed."
            ;;
          esac

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ needs.determine-environment.outputs.environment }}
          path: ./infrastructure/terraform/
          retention-days: 5

  terraform-apply:
    name: Terraform Apply
    needs: [determine-environment, terraform-plan]
    runs-on: ubuntu-latest
    if: needs.terraform-plan.outputs.has-changes == 'true' && (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') || (github.event_name == 'push' && github.ref_name == 'main')
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.output-url.outputs.app-url }}
    permissions:
      contents: read
      id-token: write
    env:
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      TF_VAR_app_key: ${{ secrets.APP_KEY }}
      TF_VAR_certificate_arn: ${{ secrets.CERTIFICATE_ARN }}
    outputs:
      app-url: ${{ steps.deploy.outputs.app-url }}
      rds-endpoint: ${{ steps.deploy.outputs.rds-endpoint }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE }}
          aws-region: ${{ vars.AWS_REGION || 'eu-central-1' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ needs.determine-environment.outputs.environment }}
          path: ./infrastructure/terraform/

      - name: Terraform Init
        working-directory: ./infrastructure/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=${{ needs.determine-environment.outputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION || 'eu-central-1' }}" \
            -backend-config="dynamodb_table=${{ secrets.TERRAFORM_LOCK_TABLE }}"
          

      - name: Terraform Apply
        id: apply
        working-directory: ./infrastructure/terraform
        run: |
          echo "🔄 Starting Terraform Apply..."
          
          terraform apply \
            -auto-approve \
            -no-color \
            tfplan
          
          echo "✅ Terraform Apply completed successfully!"