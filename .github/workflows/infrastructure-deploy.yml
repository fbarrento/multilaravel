name: Infrastrycture Deployment

on:
  push:
    branches:
      - main
      - production
      - development
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/infrastructure-deploy.yml'
  pull_request:
    paths:
      - 'infrastructure/terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      action:
        description: 'Terraform action'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
        default: plan

env:
  TF_VERSION: "1.6.0"
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      aws-account-id: ${{ steps.env.outputs.aws-account-id }}
      deploy-role: ${{ steps.env.outputs.deploy-role }}
    steps:
      - name: Determine Environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          else
            case "${{ github.ref_name }}" in
              development)
                ENVIRONMENT="development"
                ;;
              main)
                ENVIRONMENT="staging"
                ;;
              production)
                ENVIRONMENT="production"
                ;;
              *)
                ENVIRONMENT="development"
                ;;
            esac
          fi
          echo "Environment determined: $ENVIRONMENT"
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
      


  terraform-plan:
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    outputs:
      plan-output: ${{ steps.plan.outputs.plan-output }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE }} #${{ needs.determine-environment.outputs.deploy-role }}
          aws-region: ${{ vars.AWS_REGION || 'eu-central-1' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ./infrastructure/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=${{ needs.determine-environment.outputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION || 'eu-central-1' }}" \
            -backend-config="dynamodb_table=${{ secrets.TERRAFORM_LOCK_TABLE }}"

      - name: Terraform Validate
        working-directory: ./infrastructure/terraform
        run: terraform validate
